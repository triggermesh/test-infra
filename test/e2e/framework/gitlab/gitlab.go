/*
Copyright (c) 2021 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package gitlab

import (
	"os"
	"time"

	gitlab "github.com/xanzy/go-gitlab"

	"github.com/triggermesh/test-infra/test/e2e/framework"
)

const (
	DefaultBranch = "main"

	commitFileName = "README.md"
)

const apiTokenEnvVar = "GITLAB_API_TOKEN"

// NewClient returns a new GitLab client.
func NewClient() *gitlab.Client {
	cli, err := gitlab.NewClient(APIToken())
	if err != nil {
		framework.FailfWithOffset(2, "Failed to create GitLab client: %s", err)
	}

	return cli
}

// APIToken returns a GitLab API token read from the environment.
func APIToken() string {
	return os.Getenv(apiTokenEnvVar)
}

// CreateProject creates a GitLab project named after the given
// framework.Framework with an initialized default branch.
func CreateProject(cli *gitlab.Client, f *framework.Framework) *gitlab.Project {
	projOpt := &gitlab.CreateProjectOptions{
		Name:        &f.UniqueName,
		Description: gitlab.String("Generated by the TriggerMesh e2e test suite"),
	}

	proj, _, err := cli.Projects.CreateProject(projOpt)
	if err != nil {
		framework.FailfWithOffset(2, "Failed to create GitLab project: %s", err)
	}

	return proj
}

// DeleteProject deletes a GitLab project by project ID.
func DeleteProject(cli *gitlab.Client, project *gitlab.Project) {
	_, err := cli.Projects.DeleteProject(project.ID)
	if err != nil {
		framework.FailfWithOffset(2, "Failed to delete GitLab project: %s", err)
	}
}

// CreateCommit creates a Git commit on the default branch in the repository
// with the given project ID.
func CreateCommit(cli *gitlab.Client, project *gitlab.Project) *gitlab.File {
	commitOpts := gitlab.CreateFileOptions{
		Content:       gitlab.String("At the sound of the tone, the current time will be " + time.Now().Format(time.RFC1123)),
		CommitMessage: gitlab.String("Create file " + commitFileName),
		Branch:        gitlab.String(DefaultBranch),
		AuthorEmail:   gitlab.String("dev@triggermesh.com"),
		AuthorName:    gitlab.String("TriggerMesh e2e"),
	}

	_, _, err := cli.RepositoryFiles.CreateFile(project.ID, commitFileName, &commitOpts)
	if err != nil {
		framework.FailfWithOffset(2, "Failed to create file: %s", err)
	}

	ref := "refs/heads/" + DefaultBranch

	file, _, err := cli.RepositoryFiles.GetFileMetaData(project.ID, commitFileName, &gitlab.GetFileMetaDataOptions{
		Ref: &ref,
	})
	if err != nil {
		framework.FailfWithOffset(2, "Failed to find file: %s", err)
	}

	return file
}
